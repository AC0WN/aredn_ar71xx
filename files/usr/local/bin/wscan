#!/usr/bin/perl -w
=for commnet
  Part of AREDN -- Used for creating Amateur Radio Emergency Data Networks
  Copyright (C) 2015 Conrad Lara
   See Contributors file for additional contributors

  Copyright (c) 2013 David Rivenburg et al. BroadBand-HamNet

  2015-04-01 AE6XE update to display neighbor nodes, replace vendor with mode

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation version 3 of the License.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.

  Additional Terms:

  Additional use restrictions exist on the AREDN(TM) trademark and logo.
    See AREDNLicense.txt for more info.

  Attributions to the AREDN Project must be retained in the source code.
  If importing this code into a new or existing project attribution
  to the AREDN project must be added to the source code.

  You must not misrepresent the origin of the material conained within.

  Modified versions must be modified to attribute to the original source
  and be marked in reasonable ways as differentiate it from the original
  version.

=cut

sub usage
{
  print "usage: wscan [-1abnor] [-i iface]\n";
  print "       -1   run once and quit\n";
  print "       -a   average mode\n";
  print "       -b   batch mode\n";
  print "       -n   <num> number of times to scan\n";
  print "       -o   show only open access points\n";
  print "       -r   raw mode\n";
  print "       -w   produce html output\n";
  exit;
}

sub pushAP
{
  my($signal, $chan, $key, $ssid, $mac, $mode) = @_;

  return if $mode eq "";
  return if $openap and ($key ne "off" or $mode ne "Master");

  if($ssid eq "")   { $ssid = "(hidden)" }

  if($key eq "none") { $key = " " }
  else               { $key = "*" }

  $mac =~ /^(\w\w):(\w\w):(\w\w):(\w\w):(\w\w):(\w\w)/;
  $mac1 = $1 . $2 . $3;
  $mac2 = $4 . $5 . $6;
  $mac  = $mac1 . $mac2;

  if    ($ssid =~ /AREDN-(5|10|20)-v[3456]$/)                        {$typenet = "AREDN" }
  elsif ($ssid =~ /BroadbandHamnet-(5|10|20)-v[3456]$/)              {$typenet = "BroadbandHamnet"  }  
  elsif ($mode eq "Master")                                          {$typenet = "AP"    }
  elsif ($mode eq "Managed")                                         {$typenet = "Client"}
  elsif ($mode eq "Ad-Hoc" and $ssid =~ /(.*)-(5|10|20)-v[3456]$/ )  {$typenet = $1      }
  else  {$typenet = $mode}

  if($avg)
  {
    $avgs{"$mac total"} += $signal;
    $avgs{"$mac num"} += 1;
    $aphash{$mac} = sprintf "%2d %s %-32s %s:%s %s\n",
      $chan, $key, $ssid, $mac1, $mac2, $typenet;
  }
  elsif($web)
  {
    push @list, sprintf "%03d|%d|%s|%s|%s:%s|%s",
      $signal, $chan, $key, $ssid, $mac1, $mac2, $typenet;
  }
  else
  {
    push @list, sprintf "%3d %2d %s %-32s %s:%s %s\n",
      $signal, $chan, $key, $ssid, $mac1, $mac2, $typenet;
  }
}

###################################################

$avg = 0;       # average mode
$batch = 0;     # batch mode
$loops = 0;     # number of times to run 0=inf
$raw = 0;       # raw mode
$openap = 0;    # show open ap's
$iface = "wlan0"; # wireless interface

$iters = 0;     # number of iterations
%avgs = ();     # average statistics
%aphash = ();   # list of ap's for avg mode

while(defined ($arg = shift))
{
  if   ($arg eq "-h") { usage() }
  elsif($arg eq "-1") { $loops = 1 }
  elsif($arg eq "-a") { $avg = 1 }
  elsif($arg eq "-b") { $batch = 1 }
  elsif($arg eq "-o") { $openap = 1 }
  elsif($arg eq "-r") { $raw = 1 }
  elsif($arg eq "-i") { $iface = shift }
  elsif($arg eq "-n") { $loops = shift }
  elsif($arg eq "-w") { $web = 1 }
  else { die "bad arg $arg\n" } 
}

die "bad interface" if not defined $iface;

if($raw)
{
  system("/usr/bin/iwinfo $iface scan");
  system("/usr/sbin/iw $iface station dump");
  exit;
}

while(1)
{
  $line = `grep ssid /etc/config/wireless | tail -1`;
  $line   =~ /['"](.*-(5|10|20)-v[3456])/;
  $myssid = $1;
  $myssid =~ /(.*)-(5|10|20)-v[3456]/;
  $mymode = $1;

  open(FILE, "/usr/bin/iwinfo $iface scan 2>&1 |") or die "iwinfo failed";
  $mode = "";
  $ssid = "";
  $signal = 0;
  $chan = 99;
  @list = ();

  while($line = <FILE>)
  {
    if($line =~ /Cell \d+ - Address: (\S+)/ )
    {
      if ($ssid ne $myssid) { pushAP($signal, $chan, $key, $ssid, $mac, $mode)}
      $mac = $1;
    }

    if($line =~ /\bESSID: "(.*)"/)          { $ssid = $1 }
    if($line =~ /\bESSID: unknown/)         { $ssid = "unknown" } 
    if($line =~ /\bMode: (\S+)/)            { $mode = $1 }
    if($line =~ /\bChannel: (\d+)/)         { $chan = $1 }
    if($line =~ /\bSignal: ([\d-]+)/)       { $signal = $1 }
    if($line =~ /\bEncryption: (\w+)/)      { $key = $1 }
  }

  close(FILE);
  
  if ($ssid ne $myssid) {pushAP($signal, $chan, $key, $ssid, $mac, $mode)}
  sleep 1 if not scalar @list and $loops != 1;
  
  $mode = "";                                                             
  $signal = 0;
  $key = "none";
  ++$iters;                                                               
  $bbchan = `iw $iface info | grep channel | cut -d\\  -f2`;

  open(FILE, "/usr/sbin/iw $iface station dump 2>&1 |") or die "/usr/sbin/iw failed";
  
  while($line = <FILE>)                                                   
  {                                                                       
    if($line =~ /Station (\S+) \(on $iface\)/)                              
    {                                                                     
      pushAP($signal, $bbchan, $key, $ssid, $mac, $mode);                   
      $mac = $1;                                                          
      $ip = `grep $mac /proc/net/arp`;                                         
      $mac = uc $mac;
      if ( $ip ne "" ) 
      {
         $ip =~ s/[ \t].*$// ;
         chomp($ip);
         $ssid = $ip;
         if( $ip ne "") 
         {
             foreach(`nslookup $ip`){ next unless ($ssid) = /Address 1: $ip (\S+)\.local\.mesh/ }
	     if ( $ssid eq "" ) { $ssid = $ip }
         }
      }
      else { $ssid = "????" }
      $mode=$mymode;
    }                                                                     
    
    if($line =~ /signal avg:[ \t]+([-\d]+)/)  {  $signal = $1 }                    
  }                                                                       
  
  close(FILE);                                                   
  pushAP($signal, $bbchan, $key, $ssid, $mac, $mode);              
  sleep 1 if not scalar @list and $loops != 1;  
  
  if(not $batch)
  {
    if($avg)
    {
      system "clear";
      printf "Sig Rel Ch E          SSID or Hostname            MAC      Mode  %6d\n", $iters;
      print "--- --- -- - -------------------------------- ------------- ------\n";
    }
    elsif($web)
    {
	print "<table class=sortable border=1 cellpadding=5>\n";
	print "<tr><th>Sig</th><th>Chan</th><th>Enc</th><th>SSID or Hostname</th><th>MAC</th><th>Mode</th></tr>\n";
    }
    else
    {
      #system "clear";
      printf "Sig Ch E         SSID or Hostname             MAC      Mode  %6d\n", $iters;
      print "--- -- - -------------------------------- ------------- ------\n";
    }
  }

  if($avg)
  {
    open(FILE, "| sort -nr");
    foreach $mac (keys %aphash)
    {
      printf FILE "%3d %3d %s",
        ($avgs{"$mac total"} - $avgs{"$mac num"} + 1)/$avgs{"$mac num"},
        100*$avgs{"$mac num"}/$iters,
        $aphash{$mac};
    }
    close(FILE);
    print "\n";
  }
  elsif($web)
  {
      foreach $line (sort @list)
      {
	  if ( $line =~ /AREDN/) { print "<tr class=\"wscan-row-node\">"}
          else { print "<tr>"}

	  my $i = 0;
	  foreach $val (split /\|/, $line)
	  {
	      $val = "&nbsp;" unless $val =~ /\S/;
	      if($i++ == 3) { print "<td>$val</td>" }
	      else          { print "<td align=center>$val</td>" }
	  }
	  print "<td>&nbsp;</td>" if $i < 6;
	  print "</tr>\n";
      }
      print "</table>\n";
      exit;
  }
  else
  {
    open(FILE, "| sort -nr");
    print FILE @list;
    close(FILE);
    print "\n";
  }

  last if --$loops == 0;
}
