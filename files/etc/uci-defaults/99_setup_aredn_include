#!/bin/sh
# extract auto-generated first boot switch config settings
# and store them for future use
if [ ! -f /etc/aredn_include/swconfig ]
then
  mkdir -p /etc/aredn_include
  touch /etc/aredn_include/swconfig
  i=0
  while true; do
    uci -q get network.\@switch\[$i\] > /dev/null
    local status=$?
    if [ $status == 1 ]
    then
      break
    fi
    echo "config switch" >> /etc/aredn_include/swconfig
    echo "    option name '`uci -q get network.\@switch\[$i\].name`'" >> /etc/aredn_include/swconfig
    echo "    option reset '`uci -q get network.\@switch\[$i\].reset`'" >> /etc/aredn_include/swconfig
    echo "    option enable_vlan '`uci -q get network.\@switch\[$i\].enable_vlan`'" >> /etc/aredn_include/swconfig
    echo "" >> /etc/aredn_include/swconfig
    let i++
  done

  i=0
  while true; do
    uci -q get network.\@switch_vlan\[$i\] > /dev/null
    local status=$?
    if [ $status == 1 ]
    then
      break
    fi
    echo "config switch_vlan" >> /etc/aredn_include/swconfig
    echo "	option device '`uci -q get network.\@switch_vlan\[$i\].device`'" >> /etc/aredn_include/swconfig
    echo "	option vlan '`uci -q get network.\@switch_vlan\[$i\].vlan`'" >> /etc/aredn_include/swconfig
    echo "	option ports '`uci -q get network.\@switch_vlan\[$i\].ports`'" >> /etc/aredn_include/swconfig
    echo "" >> /etc/aredn_include/swconfig
    let i++
  done

  i=0
  while true; do
    uci -q get network.\@switch_port\[$i\] > /dev/null
    local status=$?
    if [ $status == 1 ]
    then
      break
    fi
    echo "config switch_port" >> /etc/aredn_include/swconfig
    echo "	option device '`uci -q get network.\@switch_port\[$i\].device`'" >> /etc/aredn_include/swconfig
    echo "	option port '`uci -q get network.\@switch_port\[$i\].port`'" >> /etc/aredn_include/swconfig
    echo "	option pvid '`uci -q get network.\@switch_port\[$i\].pvid`'" >> /etc/aredn_include/swconfig
    echo "" >> /etc/aredn_include/swconfig
    let i++
  done

fi


# Obtain and store the path to the wireless card so it can be used latter
if [ -z "$(uci -q get wireless.radio0.path)" ]
then
  mkdir -p /etc/aredn_include
  rm -f /etc/config/wireless
  wifi detect|grep "option path"|head -n 1 > /etc/aredn_include/radio0path
  wifi detect > /etc/config/wireless
else
  echo "	option path	'$(uci -q get wireless.radio0.path)'" > /etc/aredn_include/radio0path
fi

# Save system NET  LED settings
if [ ! -f /etc/aredn_include/system_netled ]
then
  mkdir -p /etc/aredn_include
  touch /etc/aredn_include/system_netled
  i=0
  while true; do
    uci -q get system.led_lan$i > /dev/null
    local status=$?
    if [ $status == 1 ]
    then
      break
    fi
    echo "config led 'led_lan$i'" >> /etc/aredn_include/system_netled
    echo "	option name '`uci -q get system.led_lan$i.name`'" >> /etc/aredn_include/system_netled
    echo "	option sysfs '`uci -q get system.led_lan$i.sysfs`'" >> /etc/aredn_include/system_netled
    echo "	option trigger '`uci -q get system.led_lan$i.trigger`'" >> /etc/aredn_include/system_netled
    echo "	option port_mask '`uci -q get system.led_lan$i.name`'" >> /etc/aredn_include/system_netled
    echo "" >> /etc/aredn_include/system_netled
    let i++
  done

fi

# Deal with lan and wifi having same mac address (common on TP-Link)
if [ ! -f /etc/aredn_include/ethmacfixup ]
then
  mkdir -p /etc/aredn_include
  touch /etc/aredn_include/ethmacfixup
  local lanintf="eth0"
  local wifiintf="wlan0"
  local lanmac=`ifconfig $lanintf | grep -o -E '([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}'`
  local wifimac=`ifconfig $wifiintf | grep -o -E '([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}'`


  if [ "$lanmac" = "$wifimac" ]
  then
     local wifimacdigit=`echo $wifimac | awk 'BEGIN { FS = ":" } ;{print $4}'`
     local newmac="00:00:00:00:00:00"
     if [ "$wifimacdigit" = "FF" ]
     then
       newmac=`echo "$wifimac" | awk 'BEGIN { FS = ":" } ;{print $1":"$2":"$3":00:"$5":"$6}'`
     else
       local wifimacdigitplusone
       wifimacdigitplusone=`printf "%02X\n" $((0x$wifimacdigit + 1))`
       newmac=`echo "$wifimac:$wifimacdigitplusone" | awk 'BEGIN { FS = ":" } ;{print $1":"$2":"$3":"$7":"$5":"$6}'`
     fi
     echo -e "\toption\tmacaddr\t$newmac" > /etc/aredn_include/ethmacfixup
     uci -q set "network.lan.macaddr=$newmac"
     uci commit
     /etc/init.d/network restart
  fi
fi

exit 0
